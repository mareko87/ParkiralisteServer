/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package form;

import db.DBBroker;
import java.awt.event.KeyEvent;
import java.sql.Connection;
import javax.swing.JOptionPane;
import main.Start;
import db.connection.DBConnectionDefaults;

/**
 *
 * @author marek
 */
public class DBConnectionForm extends javax.swing.JFrame {
    
    private String jdbc;
    private String localhost;
    private String dbName;
    private String username;
    private String password;

    /**
     * Creates new form DBConnectionForm
     */
    public DBConnectionForm() {
        initComponents();
        setDefaultFieldValues();
        btnConnect.requestFocusInWindow();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        txtDatabaseName = new javax.swing.JTextField();
        txtJdbc = new javax.swing.JTextField();
        txtLocalhost = new javax.swing.JTextField();
        txtUsername = new javax.swing.JTextField();
        txtPassword = new javax.swing.JPasswordField();
        btnConnect = new javax.swing.JToggleButton();
        btnCancel = new javax.swing.JToggleButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Database Connection Form");
        setResizable(false);

        jLabel1.setText("jdbc:");
        jLabel1.setMaximumSize(new java.awt.Dimension(200, 14));
        jLabel1.setMinimumSize(new java.awt.Dimension(50, 14));
        jLabel1.setPreferredSize(new java.awt.Dimension(110, 14));

        jLabel2.setText("localhost:");
        jLabel2.setMaximumSize(new java.awt.Dimension(200, 14));
        jLabel2.setMinimumSize(new java.awt.Dimension(50, 14));
        jLabel2.setPreferredSize(new java.awt.Dimension(110, 14));

        jLabel3.setText("database name:");
        jLabel3.setMaximumSize(new java.awt.Dimension(200, 14));
        jLabel3.setMinimumSize(new java.awt.Dimension(50, 14));
        jLabel3.setPreferredSize(new java.awt.Dimension(110, 14));

        jLabel4.setText("usrnername:");
        jLabel4.setMaximumSize(new java.awt.Dimension(200, 14));
        jLabel4.setMinimumSize(new java.awt.Dimension(50, 14));
        jLabel4.setPreferredSize(new java.awt.Dimension(110, 14));

        jLabel5.setText("password:");
        jLabel5.setMaximumSize(new java.awt.Dimension(200, 14));
        jLabel5.setPreferredSize(new java.awt.Dimension(110, 14));

        txtDatabaseName.setText("parkiraliste");
        txtDatabaseName.setMaximumSize(new java.awt.Dimension(300, 25));
        txtDatabaseName.setMinimumSize(new java.awt.Dimension(100, 25));
        txtDatabaseName.setPreferredSize(new java.awt.Dimension(200, 25));
        txtDatabaseName.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtDatabaseNameFocusGained(evt);
            }
        });
        txtDatabaseName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtDatabaseNameKeyPressed(evt);
            }
        });

        txtJdbc.setText("mysql");
        txtJdbc.setMaximumSize(new java.awt.Dimension(300, 25));
        txtJdbc.setMinimumSize(new java.awt.Dimension(100, 25));
        txtJdbc.setPreferredSize(new java.awt.Dimension(200, 25));
        txtJdbc.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtJdbcFocusGained(evt);
            }
        });
        txtJdbc.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtJdbcKeyPressed(evt);
            }
        });

        txtLocalhost.setText("3306");
        txtLocalhost.setMaximumSize(new java.awt.Dimension(300, 25));
        txtLocalhost.setMinimumSize(new java.awt.Dimension(100, 25));
        txtLocalhost.setPreferredSize(new java.awt.Dimension(200, 25));
        txtLocalhost.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtLocalhostFocusGained(evt);
            }
        });
        txtLocalhost.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtLocalhostKeyPressed(evt);
            }
        });

        txtUsername.setText("root");
        txtUsername.setMaximumSize(new java.awt.Dimension(300, 25));
        txtUsername.setMinimumSize(new java.awt.Dimension(100, 25));
        txtUsername.setPreferredSize(new java.awt.Dimension(200, 25));
        txtUsername.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtUsernameFocusGained(evt);
            }
        });
        txtUsername.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtUsernameKeyPressed(evt);
            }
        });

        txtPassword.setText("root");
        txtPassword.setMaximumSize(new java.awt.Dimension(300, 25));
        txtPassword.setMinimumSize(new java.awt.Dimension(100, 25));
        txtPassword.setPreferredSize(new java.awt.Dimension(200, 25));
        txtPassword.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtPasswordFocusGained(evt);
            }
        });
        txtPassword.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtPasswordKeyPressed(evt);
            }
        });

        btnConnect.setText("Connect");
        btnConnect.setMaximumSize(new java.awt.Dimension(200, 25));
        btnConnect.setMinimumSize(new java.awt.Dimension(100, 25));
        btnConnect.setPreferredSize(new java.awt.Dimension(140, 25));
        btnConnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConnectActionPerformed(evt);
            }
        });
        btnConnect.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                btnConnectKeyPressed(evt);
            }
        });

        btnCancel.setText("Cancel");
        btnCancel.setMaximumSize(new java.awt.Dimension(200, 25));
        btnCancel.setMinimumSize(new java.awt.Dimension(100, 25));
        btnCancel.setPreferredSize(new java.awt.Dimension(140, 25));
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });
        btnCancel.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                btnCancelKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(33, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(txtJdbc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(txtLocalhost, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(txtDatabaseName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(txtUsername, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(txtPassword, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnCancel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnConnect, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(33, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(33, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtJdbc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 11, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtLocalhost, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 11, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtDatabaseName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 11, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtUsername, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 11, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 11, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnConnect, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnCancel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(33, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        canceling();
    }//GEN-LAST:event_btnCancelActionPerformed

    private void btnConnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConnectActionPerformed
        connection();
    }//GEN-LAST:event_btnConnectActionPerformed

    private void btnConnectKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_btnConnectKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            connection();
        }
    }//GEN-LAST:event_btnConnectKeyPressed

    private void txtJdbcKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtJdbcKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            txtLocalhost.requestFocusInWindow();
        }
    }//GEN-LAST:event_txtJdbcKeyPressed

    private void txtLocalhostKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtLocalhostKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            txtDatabaseName.requestFocusInWindow();
        }
    }//GEN-LAST:event_txtLocalhostKeyPressed

    private void txtDatabaseNameKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtDatabaseNameKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            txtUsername.requestFocusInWindow();
        }
    }//GEN-LAST:event_txtDatabaseNameKeyPressed

    private void txtUsernameKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtUsernameKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            txtPassword.requestFocusInWindow();
        }
    }//GEN-LAST:event_txtUsernameKeyPressed

    private void txtPasswordKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPasswordKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            btnConnect.requestFocusInWindow();
        }
    }//GEN-LAST:event_txtPasswordKeyPressed

    private void txtJdbcFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtJdbcFocusGained
        txtJdbc.selectAll();
    }//GEN-LAST:event_txtJdbcFocusGained

    private void txtLocalhostFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtLocalhostFocusGained
        txtLocalhost.selectAll();
    }//GEN-LAST:event_txtLocalhostFocusGained

    private void txtDatabaseNameFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDatabaseNameFocusGained
        txtDatabaseName.selectAll();
    }//GEN-LAST:event_txtDatabaseNameFocusGained

    private void txtUsernameFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtUsernameFocusGained
        txtUsername.selectAll();
    }//GEN-LAST:event_txtUsernameFocusGained

    private void txtPasswordFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtPasswordFocusGained
        txtPassword.selectAll();
    }//GEN-LAST:event_txtPasswordFocusGained

    private void btnCancelKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_btnCancelKeyPressed
        canceling();
    }//GEN-LAST:event_btnCancelKeyPressed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToggleButton btnCancel;
    private javax.swing.JToggleButton btnConnect;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JTextField txtDatabaseName;
    private javax.swing.JTextField txtJdbc;
    private javax.swing.JTextField txtLocalhost;
    private javax.swing.JPasswordField txtPassword;
    private javax.swing.JTextField txtUsername;
    // End of variables declaration//GEN-END:variables

    private boolean validation() {
        jdbc = txtJdbc.getText();
        localhost = txtLocalhost.getText();
        dbName = txtDatabaseName.getText();
        username = txtUsername.getText();
        password = String.valueOf(txtPassword.getPassword());
        
        return !(jdbc.isEmpty() || localhost.isEmpty() || dbName.isEmpty() || username.isEmpty());
    }

    public String getJdbc() {
        return jdbc;
    }

    public void setJdbc(String jdbc) {
        this.jdbc = jdbc;
    }

    public String getLocalhost() {
        return localhost;
    }

    public void setLocalhost(String localhost) {
        this.localhost = localhost;
    }

    public String getDbName() {
        return dbName;
    }

    public void setDbName(String dbName) {
        this.dbName = dbName;
    }

    public String getUsername() {
        return username;
    }

    public void setUsername(String username) {
        this.username = username;
    }

    public String getPassword() {
        return password;
    }

    public void setPassword(String password) {
        this.password = password;
    }

    private void connect() {
        Connection connection = DBBroker.getInstance().getConnection();
        if (connection == null) {
            JOptionPane.showMessageDialog(rootPane, "Invalid database connection parameters!"
                                            + "\n\nNext time try with following parameters:"
                                            + "\n____________________________________________"
                                            + "\njdbc:   " + DBConnectionDefaults.JDBC
                                            + "\nlacalhost:   " + DBConnectionDefaults.LOCALHOST
                                            + "\ndbName:   " + DBConnectionDefaults.DB_NAME
                                            + "\nusername:   " + DBConnectionDefaults.USERNAME
                                            + "\npassword:   " + DBConnectionDefaults.PASSWORD
                                            + "\n____________________________________________");
        } else {
            JOptionPane.showMessageDialog(rootPane, "Successful database connection! You can start the server.");
            ServerForm serverForm = new ServerForm();
            serverForm.setLocationRelativeTo(null);
            serverForm.setVisible(true);
        }
        dispose();
    }

    private void setDBBrokerConnectionParameters() {
        DBBroker.jdbc = jdbc;
        DBBroker.localhost = localhost;
        DBBroker.dbName = dbName;
        DBBroker.username = username;
        DBBroker.password = password;
    }

    private void connection() {
        boolean validatedSuccessufully = validation();

        if (!validatedSuccessufully) {
            JOptionPane.showMessageDialog(rootPane, "All fields are required, except password!");
            return;
        }

        setDBBrokerConnectionParameters();

        connect();
    }

    private void canceling() {
        dispose();
        System.exit(0);
    }

    private void setDefaultFieldValues() {
        txtJdbc.setText(DBConnectionDefaults.JDBC);
        txtLocalhost.setText(DBConnectionDefaults.LOCALHOST);
        txtDatabaseName.setText(DBConnectionDefaults.DB_NAME);
        txtUsername.setText(DBConnectionDefaults.USERNAME);
        txtPassword.setText(DBConnectionDefaults.PASSWORD);
    }


}
